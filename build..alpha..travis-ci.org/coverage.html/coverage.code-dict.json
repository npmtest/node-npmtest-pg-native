{"/home/travis/build/npmtest/node-npmtest-pg-native/test.js":"/* istanbul instrument in package npmtest_pg_native */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-pg-native/lib.npmtest_pg_native.js":"/* istanbul instrument in package npmtest_pg_native */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_pg_native = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_pg_native = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-pg-native/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-pg-native && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_pg_native */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_pg_native\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_pg_native.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_pg_native.rollup.js'] =\n            local.assetsDict['/assets.npmtest_pg_native.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_pg_native.__dirname + '/lib.npmtest_pg_native.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-pg-native/node_modules/pg-native/index.js":"var Libpq = require('libpq');\nvar EventEmitter = require('events').EventEmitter;\nvar util = require('util');\nvar assert = require('assert');\nvar types = require('pg-types');\n\nvar Client = module.exports = function(config) {\n  if(!(this instanceof Client)) {\n    return new Client(config);\n  }\n\n  config = config || {};\n\n  EventEmitter.call(this);\n  this.pq = new Libpq();\n  this._reading = false;\n  this._read = this._read.bind(this);\n\n  //allow custom type converstion to be passed in\n  this._types = config.types || types;\n\n  //allow config to specify returning results\n  //as an array of values instead of a hash\n  this.arrayMode = config.arrayMode || false;\n  var self = this;\n\n  //lazy start the reader if notifications are listened for\n  //this way if you only run sync queries you wont block\n  //the event loop artificially\n  this.on('newListener', function(event) {\n    if(event != 'notification') return;\n    self._startReading();\n  });\n};\n\nutil.inherits(Client, EventEmitter);\n\nClient.prototype.connect = function(params, cb) {\n  this.pq.connect(params, cb);\n};\n\nClient.prototype.connectSync = function(params) {\n  this.pq.connectSync(params);\n};\n\nClient.prototype._parseResults = function(pq, rows) {\n  var rowCount = pq.ntuples();\n  var colCount = pq.nfields();\n  for(var i = 0; i < rowCount; i++) {\n    var row = this.arrayMode ? [] : {};\n    rows.push(row);\n    for(var j = 0; j < colCount; j++) {\n      var rawValue = pq.getvalue(i, j);\n      var value = rawValue;\n      if(rawValue == '') {\n        if(pq.getisnull(i, j)) {\n          value = null;\n        }\n      } else {\n        value = this._types.getTypeParser(pq.ftype(j))(rawValue);\n      }\n      if(this.arrayMode) {\n        row.push(value);\n      } else {\n        row[pq.fname(j)] = value;\n      }\n    }\n  }\n  return rows;\n}\n\nClient.prototype.end = function(cb) {\n  this._stopReading();\n  this.pq.finish();\n  if(cb) setImmediate(cb);\n};\n\nClient.prototype._readError = function(message) {\n  this._stopReading();\n  var err = new Error(message || this.pq.errorMessage());\n  this.emit('error', err);\n};\n\nClient.prototype._stopReading = function() {\n  if(!this._reading) return;\n  this._reading = false;\n  this.pq.stopReader();\n  this.pq.removeListener('readable', this._read);\n};\n\n//called when libpq is readable\nClient.prototype._read = function() {\n  var pq = this.pq;\n  //read waiting data from the socket\n  //e.g. clear the pending 'select'\n  if(!pq.consumeInput()) {\n    //if consumeInput returns false\n    //than a read error has been encountered\n    return this._readError();\n  }\n\n  //check if there is still outstanding data\n  //if so, wait for it all to come in\n  if(pq.isBusy()) {\n    return;\n  }\n\n  //load our result object\n  var rows = []\n  while(pq.getResult()) {\n    if(pq.resultStatus() == 'PGRES_TUPLES_OK') {\n      this._parseResults(this.pq, rows);\n    }\n    if(pq.resultStatus() == 'PGRES_COPY_OUT' || pq.resultStatus() == 'PGRES_COPY_BOTH') break;\n  }\n\n\n  var status = pq.resultStatus();\n  switch(status) {\n    case 'PGRES_FATAL_ERROR':\n      return this._readError();\n    case 'PGRES_COMMAND_OK':\n    case 'PGRES_TUPLES_OK':\n    case 'PGRES_COPY_OUT':\n    case 'PGRES_COPY_BOTH':\n    case 'PGRES_EMPTY_QUERY': {\n      this.emit('result', rows);\n      break;\n    }\n    default:\n      return this._readError('unrecognized command status: ' + status);\n  }\n\n  var notice;\n  while(notice = this.pq.notifies()) {\n    this.emit('notification', notice);\n  }\n};\n\n//ensures the client is reading and\n//everything is set up for async io\nClient.prototype._startReading = function() {\n  if(this._reading) return;\n  this._reading = true;\n  this.pq.on('readable', this._read);\n  this.pq.startReader();\n};\n\nvar throwIfError = function(pq) {\n  var err = pq.resultErrorMessage() || pq.errorMessage();\n  if(err) {\n    throw new Error(err);\n  }\n}\n\nClient.prototype._awaitResult = function(cb) {\n  var self = this;\n  var onError = function(e) {\n    self.removeListener('error', onError);\n    self.removeListener('result', onResult);\n    cb(e);\n  };\n\n  var onResult = function(rows) {\n    self.removeListener('error', onError);\n    self.removeListener('result', onResult);\n    cb(null, rows);\n  };\n  this.once('error', onError);\n  this.once('result', onResult);\n  this._startReading();\n};\n\n//wait for the writable socket to drain\nClient.prototype.waitForDrain = function(pq, cb) {\n  var res = pq.flush();\n  //res of 0 is success\n  if(res === 0) return cb();\n\n  //res of -1 is failure\n  if(res === -1) return cb(pq.errorMessage());\n\n  //otherwise outgoing message didn't flush to socket\n  //wait for it to flush and try again\n  var self = this\n  //you cannot read & write on a socket at the same time\n  return pq.writable(function() {\n    self.waitForDrain(pq, cb)\n  });\n};\n\n//send an async query to libpq and wait for it to\n//finish writing query text to the socket\nClient.prototype.dispatchQuery = function(pq, fn, cb) {\n  this._stopReading();\n  var success = pq.setNonBlocking(true);\n  if(!success) return cb(new Error('Unable to set non-blocking to true'));\n  var sent = fn();\n  if(!sent) return cb(new Error(pq.errorMessage() || 'Something went wrong dispatching the query'));\n  this.waitForDrain(pq, cb);\n};\n\nClient.prototype.query = function(text, values, cb) {\n  var queryFn;\n\n  if(typeof values == 'function') {\n    cb = values;\n    queryFn = function() { return self.pq.sendQuery(text); };\n  } else {\n    queryFn = function() { return self.pq.sendQueryParams(text, values); };\n  }\n\n  var self = this\n\n  self.dispatchQuery(self.pq, queryFn, function(err) {\n    if(err) return cb(err);\n\n    self._awaitResult(cb)\n  });\n};\n\nClient.prototype.prepare = function(statementName, text, nParams, cb) {\n  var self = this;\n  var fn = function() {\n    return self.pq.sendPrepare(statementName, text, nParams);\n  }\n\n  self.dispatchQuery(self.pq, fn, function(err) {\n    if(err) return cb(err);\n    self._awaitResult(cb);\n  });\n};\n\nClient.prototype.execute = function(statementName, parameters, cb) {\n  var self = this;\n\n  var fn = function() {\n    return self.pq.sendQueryPrepared(statementName, parameters);\n  };\n\n  self.dispatchQuery(self.pq, fn, function(err, rows) {\n    if(err) return cb(err);\n    self._awaitResult(cb)\n  });\n};\n\nvar CopyStream = require('./lib/copy-stream');\nClient.prototype.getCopyStream = function() {\n  this.pq.setNonBlocking(true);\n  this._stopReading();\n  return new CopyStream(this.pq);\n};\n\n//cancel a currently executing query\nClient.prototype.cancel = function(cb) {\n  assert(cb, 'Callback is required');\n  //result is either true or a string containing an error\n  var result = this.pq.cancel();\n  return setImmediate(function() {\n    cb(result === true ? undefined : new Error(result));\n  });\n};\n\nClient.prototype.querySync = function(text, values) {\n  var queryFn;\n  var pq = this.pq;\n  pq[values ? 'execParams' : 'exec'].call(pq, text, values);\n  throwIfError(this.pq);\n  return this._parseResults(pq, []);\n};\n\nClient.prototype.prepareSync = function(statementName, text, nParams) {\n  this.pq.prepare(statementName, text, nParams);\n  throwIfError(this.pq);\n};\n\nClient.prototype.executeSync = function(statementName, parameters) {\n  this.pq.execPrepared(statementName, parameters);\n  throwIfError(this.pq);\n  return this._parseResults(this.pq, []);\n};\n\nClient.prototype.escapeLiteral = function(value) {\n  return this.pq.escapeLiteral(value);\n};\n\nClient.prototype.escapeIdentifier = function(value) {\n  return this.pq.escapeIdentifier(value);\n};\n\n//export the version number so we can check it in node-postgres\nmodule.exports.version = require('./package.json').version\n","/home/travis/build/npmtest/node-npmtest-pg-native/node_modules/pg-native/lib/copy-stream.js":"var Duplex = require('stream').Duplex;\nvar Writable = require('stream').Writable;\nvar util = require('util');\n\nvar CopyStream = module.exports = function(pq, options) {\n  Duplex.call(this, options);\n  this.pq = pq;\n  this._reading = false;\n};\n\nutil.inherits(CopyStream, Duplex);\n\n//writer methods\nCopyStream.prototype._write = function(chunk, encoding, cb) {\n  var result = this.pq.putCopyData(chunk);\n\n  //sent successfully\n  if(result === 1) return cb();\n\n  //error\n  if(result === -1) return cb(new Error(this.pq.errorMessage()));\n\n  //command would block. wait for writable and call again.\n  var self = this;\n  this.pq.writable(function() {\n    self._write(chunk, encoding, cb);\n  });\n};\n\nCopyStream.prototype.end = function() {\n  var args = Array.prototype.slice.call(arguments, 0);\n  var self = this;\n\n  var callback = args.pop();\n\n  if(args.length) {\n    this.write(args[0]);\n  }\n  var result = this.pq.putCopyEnd();\n\n  //sent successfully\n  if(result === 1) {\n    //consume our results and then call 'end' on the\n    //\"parent\" writable class so we can emit 'finish' and\n    //all that jazz\n    return consumeResults(this.pq, function(err, res) {\n      Writable.prototype.end.call(self);\n\n      //handle possible passing of callback to end method\n      if(callback) {\n        callback();\n      }\n    });\n  }\n\n  //error\n  if(result === -1) {\n    var err = new Error(this.pq.errorMessage());\n    return this.emit('error', err);\n  }\n\n  //command would block. wait for writable and call end again\n  //don't pass any buffers to end on the second call because\n  //we already sent them to possible this.write the first time\n  //we called end\n  return this.pq.writable(function() {\n    return self.end.apply(self, callback);\n  });\n};\n\n//reader methods\nCopyStream.prototype._consumeBuffer = function(cb) {\n  var result = this.pq.getCopyData(true);\n  if(result instanceof Buffer) {\n    return setImmediate(function() {\n      cb(null, result);\n    })\n  }\n  if(result === -1) {\n    //end of stream\n    return cb(null, null);\n  }\n  if(result === 0) {\n    var self = this;\n    this.pq.once('readable', function() {\n      self.pq.stopReader();\n      self.pq.consumeInput();\n      self._consumeBuffer(cb);\n    });\n    return this.pq.startReader();\n  }\n  cb(new Error('Unrecognized read status: ' + result))\n};\n\nCopyStream.prototype._read = function(size) {\n  if(this._reading) return;\n  this._reading = true;\n  //console.log('read begin');\n  var self = this\n  this._consumeBuffer(function(err, buffer) {\n    self._reading = false;\n    if(err) {\n      return self.emit('error', err)\n    }\n    if(buffer === false) {\n      //nothing to read for now, return\n      return;\n    }\n    self.push(buffer);\n  });\n};\n\nvar consumeResults = function(pq, cb) {\n\n  var cleanup = function() {\n    pq.removeListener('readable', onReadable);\n    pq.stopReader();\n  }\n\n  var readError = function(message) {\n    cleanup();\n    return cb(new Error(message || pq.errorMessage()));\n  };\n\n\n  var onReadable = function() {\n\n    //read waiting data from the socket\n    //e.g. clear the pending 'select'\n    if(!pq.consumeInput()) {\n      return readError();\n    }\n\n    //check if there is still outstanding data\n    //if so, wait for it all to come in\n    if(pq.isBusy()) {\n      return;\n    }\n\n    //load our result object\n    pq.getResult();\n\n    //\"read until results return null\"\n    //or in our case ensure we only have one result\n    if(pq.getResult() && pq.resultStatus() != 'PGRES_COPY_OUT') {\n      return readError('Only one result at a time is accepted');\n    }\n\n    if(pq.resultStatus() == 'PGRES_FATAL_ERROR') {\n      return readError();\n    }\n\n    cleanup();\n    return cb(null);\n  };\n  pq.on('readable', onReadable);\n  pq.startReader();\n};\n","/home/travis/build/npmtest/node-npmtest-pg-native/node_modules/pg-native/bench/leaks.js":"var Client = require('../');\nvar async = require('async');\n\nvar loop = function() {\n  var client = new Client();\n\n  var connect = function(cb) {\n    client.connect(cb);\n  };\n\n  var simpleQuery = function(cb) {\n    client.query('SELECT NOW()', cb);\n  };\n\n  var paramsQuery = function(cb) {\n    client.query('SELECT $1::text as name', ['Brian'], cb);\n  };\n\n  var prepared = function(cb) {\n    client.prepare('test', 'SELECT $1::text as name', 1, function(err) {\n      if(err) return cb(err);\n      client.execute('test', ['Brian'], cb);\n    });\n  };\n\n  var error = function(cb) {\n    client.query('SELECT ASLKJDASLKJD', function() {\n      cb();\n    });\n  };\n\n  var sync = function(cb) {\n    client.querySync('SELECT NOW()');\n    client.querySync('SELECT $1::text as name', ['Brian']);\n    client.prepareSync('boom', 'SELECT $1::text as name', 1);\n    client.executeSync('boom', ['Brian']);\n    setImmediate(cb);\n  };\n\n  var end = function(cb) {\n    client.end(cb);\n  };\n\n  var ops = [\n    connect,\n    simpleQuery,\n    paramsQuery,\n    prepared,\n    sync,\n    end\n  ];\n\n  var start = Date.now();\n  async.series(ops, function(err) {\n    if(err) throw err;\n    console.log(Date.now() - start);\n    setImmediate(loop);\n  });\n};\n\n//on my machine this will consume memory up to about 50 megs of ram\n//and then stabalize at that point\nloop();\n"}